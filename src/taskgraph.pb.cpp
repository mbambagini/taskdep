// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taskgraph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TaskGraph {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dependency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dependency_reflection_ = NULL;
const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_taskgraph_2eproto() {
  protobuf_AddDesc_taskgraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taskgraph.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wcet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, sync_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Dependency_descriptor_ = file->message_type(1);
  static const int Dependency_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dependency, fromtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dependency, totask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dependency, exchangeddata_),
  };
  Dependency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dependency_descriptor_,
      Dependency::default_instance_,
      Dependency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dependency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dependency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dependency));
  Graph_descriptor_ = file->message_type(2);
  static const int Graph_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, maxwcet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, minwcet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, maxexchangeddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, minexchangeddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, dependencies_),
  };
  Graph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Graph_descriptor_,
      Graph::default_instance_,
      Graph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Graph));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taskgraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dependency_descriptor_, &Dependency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Graph_descriptor_, &Graph::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taskgraph_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete Dependency::default_instance_;
  delete Dependency_reflection_;
  delete Graph::default_instance_;
  delete Graph_reflection_;
}

void protobuf_AddDesc_taskgraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017taskgraph.proto\022\tTaskGraph\"<\n\004Task\022\n\n\002"
    "id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004wcet\030\003 \002(\005\022\014\n\004"
    "sync\030\004 \001(\005\"E\n\nDependency\022\020\n\010fromTask\030\001 \002"
    "(\t\022\016\n\006toTask\030\002 \002(\t\022\025\n\rexchangedData\030\003 \002("
    "\005\"\252\001\n\005Graph\022\017\n\007maxWcet\030\001 \002(\005\022\017\n\007minWcet\030"
    "\002 \002(\005\022\030\n\020maxExchangedData\030\003 \002(\005\022\030\n\020minEx"
    "changedData\030\004 \002(\005\022\036\n\005tasks\030\005 \003(\0132\017.TaskG"
    "raph.Task\022+\n\014dependencies\030\006 \003(\0132\025.TaskGr"
    "aph.Dependency", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taskgraph.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  Dependency::default_instance_ = new Dependency();
  Graph::default_instance_ = new Graph();
  Task::default_instance_->InitAsDefaultInstance();
  Dependency::default_instance_->InitAsDefaultInstance();
  Graph::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taskgraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taskgraph_2eproto {
  StaticDescriptorInitializer_taskgraph_2eproto() {
    protobuf_AddDesc_taskgraph_2eproto();
  }
} static_descriptor_initializer_taskgraph_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kNameFieldNumber;
const int Task::kWcetFieldNumber;
const int Task::kSyncFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wcet_ = 0;
  sync_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskgraph_2eproto();  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    wcet_ = 0;
    sync_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wcet;
        break;
      }
      
      // required int32 wcet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wcet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wcet_)));
          set_has_wcet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sync;
        break;
      }
      
      // optional int32 sync = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_)));
          set_has_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 wcet = 3;
  if (has_wcet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wcet(), output);
  }
  
  // optional int32 sync = 4;
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sync(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 wcet = 3;
  if (has_wcet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wcet(), target);
  }
  
  // optional int32 sync = 4;
  if (has_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sync(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 wcet = 3;
    if (has_wcet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wcet());
    }
    
    // optional int32 sync = 4;
    if (has_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sync());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_wcet()) {
      set_wcet(from.wcet());
    }
    if (from.has_sync()) {
      set_sync(from.sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(wcet_, other->wcet_);
    std::swap(sync_, other->sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dependency::kFromTaskFieldNumber;
const int Dependency::kToTaskFieldNumber;
const int Dependency::kExchangedDataFieldNumber;
#endif  // !_MSC_VER

Dependency::Dependency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dependency::InitAsDefaultInstance() {
}

Dependency::Dependency(const Dependency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dependency::SharedCtor() {
  _cached_size_ = 0;
  fromtask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeddata_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dependency::~Dependency() {
  SharedDtor();
}

void Dependency::SharedDtor() {
  if (fromtask_ != &::google::protobuf::internal::kEmptyString) {
    delete fromtask_;
  }
  if (totask_ != &::google::protobuf::internal::kEmptyString) {
    delete totask_;
  }
  if (this != default_instance_) {
  }
}

void Dependency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dependency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dependency_descriptor_;
}

const Dependency& Dependency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskgraph_2eproto();  return *default_instance_;
}

Dependency* Dependency::default_instance_ = NULL;

Dependency* Dependency::New() const {
  return new Dependency;
}

void Dependency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromtask()) {
      if (fromtask_ != &::google::protobuf::internal::kEmptyString) {
        fromtask_->clear();
      }
    }
    if (has_totask()) {
      if (totask_ != &::google::protobuf::internal::kEmptyString) {
        totask_->clear();
      }
    }
    exchangeddata_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dependency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fromTask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromtask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromtask().data(), this->fromtask().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toTask;
        break;
      }
      
      // required string toTask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toTask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->totask().data(), this->totask().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchangedData;
        break;
      }
      
      // required int32 exchangedData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangedData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangeddata_)));
          set_has_exchangeddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dependency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fromTask = 1;
  if (has_fromtask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromtask().data(), this->fromtask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fromtask(), output);
  }
  
  // required string toTask = 2;
  if (has_totask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totask().data(), this->totask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->totask(), output);
  }
  
  // required int32 exchangedData = 3;
  if (has_exchangeddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exchangeddata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dependency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fromTask = 1;
  if (has_fromtask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromtask().data(), this->fromtask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromtask(), target);
  }
  
  // required string toTask = 2;
  if (has_totask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totask().data(), this->totask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->totask(), target);
  }
  
  // required int32 exchangedData = 3;
  if (has_exchangeddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exchangeddata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dependency::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fromTask = 1;
    if (has_fromtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromtask());
    }
    
    // required string toTask = 2;
    if (has_totask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totask());
    }
    
    // required int32 exchangedData = 3;
    if (has_exchangeddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangeddata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dependency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dependency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dependency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dependency::MergeFrom(const Dependency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromtask()) {
      set_fromtask(from.fromtask());
    }
    if (from.has_totask()) {
      set_totask(from.totask());
    }
    if (from.has_exchangeddata()) {
      set_exchangeddata(from.exchangeddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dependency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dependency::CopyFrom(const Dependency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dependency::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Dependency::Swap(Dependency* other) {
  if (other != this) {
    std::swap(fromtask_, other->fromtask_);
    std::swap(totask_, other->totask_);
    std::swap(exchangeddata_, other->exchangeddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dependency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dependency_descriptor_;
  metadata.reflection = Dependency_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Graph::kMaxWcetFieldNumber;
const int Graph::kMinWcetFieldNumber;
const int Graph::kMaxExchangedDataFieldNumber;
const int Graph::kMinExchangedDataFieldNumber;
const int Graph::kTasksFieldNumber;
const int Graph::kDependenciesFieldNumber;
#endif  // !_MSC_VER

Graph::Graph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Graph::InitAsDefaultInstance() {
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Graph::SharedCtor() {
  _cached_size_ = 0;
  maxwcet_ = 0;
  minwcet_ = 0;
  maxexchangeddata_ = 0;
  minexchangeddata_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Graph::~Graph() {
  SharedDtor();
}

void Graph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taskgraph_2eproto();  return *default_instance_;
}

Graph* Graph::default_instance_ = NULL;

Graph* Graph::New() const {
  return new Graph;
}

void Graph::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxwcet_ = 0;
    minwcet_ = 0;
    maxexchangeddata_ = 0;
    minexchangeddata_ = 0;
  }
  tasks_.Clear();
  dependencies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 maxWcet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxwcet_)));
          set_has_maxwcet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minWcet;
        break;
      }
      
      // required int32 minWcet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minWcet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minwcet_)));
          set_has_minwcet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxExchangedData;
        break;
      }
      
      // required int32 maxExchangedData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxExchangedData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxexchangeddata_)));
          set_has_maxexchangeddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minExchangedData;
        break;
      }
      
      // required int32 minExchangedData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minExchangedData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minexchangeddata_)));
          set_has_minexchangeddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        break;
      }
      
      // repeated .TaskGraph.Task tasks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        if (input->ExpectTag(50)) goto parse_dependencies;
        break;
      }
      
      // repeated .TaskGraph.Dependency dependencies = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dependencies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dependencies;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 maxWcet = 1;
  if (has_maxwcet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxwcet(), output);
  }
  
  // required int32 minWcet = 2;
  if (has_minwcet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minwcet(), output);
  }
  
  // required int32 maxExchangedData = 3;
  if (has_maxexchangeddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxexchangeddata(), output);
  }
  
  // required int32 minExchangedData = 4;
  if (has_minexchangeddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minexchangeddata(), output);
  }
  
  // repeated .TaskGraph.Task tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tasks(i), output);
  }
  
  // repeated .TaskGraph.Dependency dependencies = 6;
  for (int i = 0; i < this->dependencies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dependencies(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Graph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 maxWcet = 1;
  if (has_maxwcet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxwcet(), target);
  }
  
  // required int32 minWcet = 2;
  if (has_minwcet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minwcet(), target);
  }
  
  // required int32 maxExchangedData = 3;
  if (has_maxexchangeddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxexchangeddata(), target);
  }
  
  // required int32 minExchangedData = 4;
  if (has_minexchangeddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minexchangeddata(), target);
  }
  
  // repeated .TaskGraph.Task tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tasks(i), target);
  }
  
  // repeated .TaskGraph.Dependency dependencies = 6;
  for (int i = 0; i < this->dependencies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dependencies(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Graph::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 maxWcet = 1;
    if (has_maxwcet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwcet());
    }
    
    // required int32 minWcet = 2;
    if (has_minwcet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minwcet());
    }
    
    // required int32 maxExchangedData = 3;
    if (has_maxexchangeddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxexchangeddata());
    }
    
    // required int32 minExchangedData = 4;
    if (has_minexchangeddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minexchangeddata());
    }
    
  }
  // repeated .TaskGraph.Task tasks = 5;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  // repeated .TaskGraph.Dependency dependencies = 6;
  total_size += 1 * this->dependencies_size();
  for (int i = 0; i < this->dependencies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dependencies(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Graph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Graph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  dependencies_.MergeFrom(from.dependencies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxwcet()) {
      set_maxwcet(from.maxwcet());
    }
    if (from.has_minwcet()) {
      set_minwcet(from.minwcet());
    }
    if (from.has_maxexchangeddata()) {
      set_maxexchangeddata(from.maxexchangeddata());
    }
    if (from.has_minexchangeddata()) {
      set_minexchangeddata(from.minexchangeddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dependencies_size(); i++) {
    if (!this->dependencies(i).IsInitialized()) return false;
  }
  return true;
}

void Graph::Swap(Graph* other) {
  if (other != this) {
    std::swap(maxwcet_, other->maxwcet_);
    std::swap(minwcet_, other->minwcet_);
    std::swap(maxexchangeddata_, other->maxexchangeddata_);
    std::swap(minexchangeddata_, other->minexchangeddata_);
    tasks_.Swap(&other->tasks_);
    dependencies_.Swap(&other->dependencies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TaskGraph

// @@protoc_insertion_point(global_scope)
